import React, { useEffect, useRef, useState, Suspense, useCallback } from 'react';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import * as THREE from 'three';
import { gsap } from 'gsap';
import ScrollTrigger from 'gsap/ScrollTrigger';
import Lenis from '@studio-freight/lenis';
import confetti from 'canvas-confetti';
import { 
  Music, Brain, Wand2, Terminal, GitBranch, Code2,
  Sparkles, Palette, Gamepad2, Moon, Sun, Cloud,
  Zap, Globe, Compass, Laugh, Flame, PawPrint
} from 'lucide-react';

// Lazy loaded components
const Board = React.lazy(() => import('./components/GridLayout/Board'));
const TunnelEffect = React.lazy(() => import('./components/TunnelShader/TunnelEffect'));
const TextRevealSection = React.lazy(() => import('./components/TextAnimation/TextRevealSection'));
const CustomCursor = React.lazy(() => import('./components/CustomCursor'));

// Register GSAP plugin
gsap.registerPlugin(ScrollTrigger);

// Theme configurations - now with meme names
const THEMES = {
  DARK: 'dark',
  LIGHT: 'light',
  CYBER: 'cyber',
  RETRO: 'retro',
  NATURE: 'nature',
  SPACE: 'space',
  MEME: 'meme',
  ANIME: 'anime'
};

// Updated theme configs with meme-friendly colors
const THEME_CONFIGS = {
  [THEMES.DARK]: {
    background: 'bg-black',
    text: 'text-white',
    accent: 'text-red-500',
    hover: 'hover:text-red-400',
    name: 'Dark Mode Enjoyer'
  },
  [THEMES.LIGHT]: {
    background: 'bg-white',
    text: 'text-black',
    accent: 'text-blue-500',
    hover: 'hover:text-blue-400',
    name: 'Light Mode Psychopath'
  },
  [THEMES.CYBER]: {
    background: 'bg-gray-900',
    text: 'text-cyan-400',
    accent: 'text-purple-500',
    hover: 'hover:text-purple-400',
    name: 'H4ck3rm4n'
  },
  [THEMES.RETRO]: {
    background: 'bg-amber-100',
    text: 'text-amber-900',
    accent: 'text-orange-600',
    hover: 'hover:text-orange-500',
    name: 'Boomer Mode'
  },
  [THEMES.NATURE]: {
    background: 'bg-green-900',
    text: 'text-emerald-200',
    accent: 'text-yellow-400',
    hover: 'hover:text-yellow-300',
    name: 'Touch Grass'
  },
  [THEMES.SPACE]: {
    background: 'bg-indigo-950',
    text: 'text-violet-200',
    accent: 'text-fuchsia-500',
    hover: 'hover:text-fuchsia-400',
    name: 'Space Cadet'
  },
  [THEMES.MEME]: {
    background: 'bg-pink-500',
    text: 'text-yellow-300',
    accent: 'text-green-400',
    hover: 'hover:text-green-300',
    name: 'MEME LORD'
  },
  [THEMES.ANIME]: {
    background: 'bg-purple-800',
    text: 'text-pink-200',
    accent: 'text-cyan-300',
    hover: 'hover:text-cyan-200',
    name: 'Weeb Mode'
  }
};

// Custom hooks
const useWindowSize = () => {
  const [size, setSize] = useState({
    width: window.innerWidth,
    height: window.innerHeight
  });

  useEffect(() => {
    const handleResize = () => {
      setSize({ width: window.innerWidth, height: window.innerHeight });
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return size;
};

const useTheme = (initialTheme = THEMES.DARK) => {
  const [theme, setTheme] = useState(initialTheme);
  const [achievements, setAchievements] = useState(new Set());

  const changeTheme = useCallback((newTheme) => {
    setTheme(newTheme);
    
    // Track theme usage and unlock achievement if all themes tried
    setAchievements(prev => {
      const newAchievements = new Set(prev);
      newAchievements.add(`theme_${newTheme}`);
      
      if (newAchievements.size === Object.keys(THEMES).length) {
        confetti({
          particleCount: 100,
          spread: 160,
          origin: { y: 0.6 }
        });
        newAchievements.add('theme_master');
      }
      
      return newAchievements;
    });
  }, []);

  return {
    theme,
    changeTheme,
    currentTheme: THEME_CONFIGS[theme],
    achievements
  };
};

const useKonamiCode = (callback) => {
  const [sequence, setSequence] = useState([]);
  const konamiCode = [38, 38, 40, 40, 37, 39, 37, 39, 66, 65];

  useEffect(() => {
    const handleKeyDown = (e) => {
      const newSequence = [...sequence, e.keyCode];
      if (newSequence.length > konamiCode.length) {
        newSequence.shift();
      }
      setSequence(newSequence);

      if (newSequence.join(',') === konamiCode.join(',')) {
        callback();
        setSequence([]);
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [sequence, callback]);
};

// Meme Component
const MemeImage = React.memo(({ src, alt, className }) => {
  const [loaded, setLoaded] = useState(false);
  const [rotation] = useState(() => Math.random() * 10 - 5); // Random slight rotation
  
  return (
    <img 
      src={src} 
      alt={alt} 
      className={`transition-all duration-300 ${className} ${loaded ? 'opacity-100' : 'opacity-0'}`}
      style={{ transform: `rotate(${rotation}deg)` }}
      onLoad={() => setLoaded(true)}
    />
  );
});

// Floating Anime Character Component
const FloatingAnimeCharacter = React.memo(({ position = 'right' }) => {
  // Placeholder images - replace with actual anime character images
  const animeCharacters = [
    "/api/placeholder/150/200",
    "/api/placeholder/150/200",
    "/api/placeholder/150/200",
    "/api/placeholder/150/200"
  ];
  
  const [character] = useState(() => animeCharacters[Math.floor(Math.random() * animeCharacters.length)]);
  
  return (
    <div className={`fixed ${position === 'right' ? 'right-4' : 'left-4'} top-1/3 z-40 pointer-events-none`}>
      <div className="animate-float">
        <img 
          src={character} 
          alt="Anime character" 
          className="rounded-lg shadow-lg"
        />
      </div>
    </div>
  );
});

// Components
const EasterEggButton = React.memo(({ icon: Icon, isActive, onClick, tooltip }) => (
  <div className="relative group">
    <button
      onClick={onClick}
      className={`p-3 rounded-full transform transition-all duration-300 ${
        isActive ? 'bg-red-500' : 'bg-gray-800'
      } hover:bg-red-600 hover:scale-105 active:scale-95 hover:rotate-12`}
    >
      <Icon className="w-6 h-6 text-white" />
    </button>
    <span className="absolute -bottom-8 left-1/2 -translate-x-1/2 pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity bg-black px-2 py-1 rounded text-xs text-white whitespace-nowrap">
      {tooltip}
    </span>
  </div>
));

const ThemeSelector = React.memo(({ theme, handleThemeChange }) => (
  <div className="fixed top-4 right-4 flex gap-2 z-50 flex-wrap max-w-xs justify-end">
    {Object.entries(THEMES).map(([key, value]) => (
      <button
        key={key}
        onClick={() => handleThemeChange(value)}
        className={`p-2 rounded-full transition-all duration-300 ${
          theme === value ? 'scale-110 ring-2 ring-white animate-pulse' : 'opacity-70'
        }`}
        title={THEME_CONFIGS[value].name}
      >
        {value === THEMES.DARK && <Moon className="w-6 h-6 text-gray-200" />}
        {value === THEMES.LIGHT && <Sun className="w-6 h-6 text-yellow-400" />}
        {value === THEMES.CYBER && <Zap className="w-6 h-6 text-cyan-400" />}
        {value === THEMES.RETRO && <Globe className="w-6 h-6 text-orange-400" />}
        {value === THEMES.NATURE && <Cloud className="w-6 h-6 text-green-400" />}
        {value === THEMES.SPACE && <Compass className="w-6 h-6 text-purple-400" />}
        {value === THEMES.MEME && <Laugh className="w-6 h-6 text-green-400" />}
        {value === THEMES.ANIME && <PawPrint className="w-6 h-6 text-pink-400" />}
      </button>
    ))}
  </div>
));

// Personal Profile Component
const PersonalProfile = React.memo(() => {
  return (
    <div className="fixed left-4 bottom-4 z-50 flex items-center gap-3 bg-black/50 p-3 rounded-lg backdrop-blur-sm">
      <img 
        src="/api/placeholder/80/80" 
        alt="Your profile" 
        className="rounded-full border-2 border-white"
      />
      <div>
        <div className="text-white font-bold">Your Name</div>
        <div className="text-gray-300 text-sm">Professional Meme Connoisseur</div>
      </div>
    </div>
  );
});

const TunnelRoute = React.memo(() => {
  const tunnelUniformsRef = useRef({
    iTime: { value: 0 },
    iResolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },
    scrollOffset: { value: 0 },
  });

  const [isExiting, setIsExiting] = useState(false);

  return (
    <div className={`tunnel-section w-full h-screen relative ${isExiting ? 'fade-out' : ''}`}>
      <Suspense fallback={<div className="w-full h-full bg-black" />}>
        <TunnelEffect uniformsRef={tunnelUniformsRef} />
      </Suspense>
      <div className="absolute inset-0 flex items-center justify-center bg-black/40">
        <Link
          to="/"
          className="text-xl font-bold text-red-500 underline hover:text-red-400 transition-colors"
          onClick={() => setIsExiting(true)}
        >
          Back to Home
        </Link>
      </div>
    </div>
  );
});

// Meme Gallery Component
const MemeGallery = React.memo(({ theme }) => {
  const memes = [
    "/api/placeholder/200/200",
    "/api/placeholder/200/200",
    "/api/placeholder/200/200",
    "/api/placeholder/200/200",
    "/api/placeholder/200/200",
    "/api/placeholder/200/200"
  ];

  return (
    <section className="py-16 px-4">
      <h2 className={`text-4xl font-bold mb-8 text-center ${theme.accent}`}>Meme Collection</h2>
      <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
        {memes.map((meme, index) => (
          <div key={index} className="group relative overflow-hidden rounded-lg transform transition-all duration-300 hover:scale-105 hover:rotate-2">
            <MemeImage src={meme} alt={`Meme ${index + 1}`} className="w-full h-full object-cover" />
            <div className="absolute inset-0 bg-black/60 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
              <button 
                className="bg-white text-black px-4 py-2 rounded-full font-bold"
                onClick={() => confetti({ particleCount: 50, origin: { y: 0.6 } })}
              >
                👌 Nice
              </button>
            </div>
          </div>
        ))}
      </div>
    </section>
  );
});

// Anime Section Component
const AnimeSection = React.memo(({ theme }) => {
  const animeContent = [
    { title: "Top Tier Waifu", image: "/api/placeholder/300/400" },
    { title: "Best Boy", image: "/api/placeholder/300/400" },
    { title: "God-Tier Villain", image: "/api/placeholder/300/400" }
  ];
  
  return (
    <section className="py-16 px-4 relative overflow-hidden">
      <div className="absolute top-0 left-0 w-full h-full opacity-10 pointer-events-none">
        <img src="/api/placeholder/1000/1000" alt="Anime background" className="w-full h-full object-cover" />
      </div>
      <h2 className={`text-4xl font-bold mb-8 text-center ${theme.accent} relative z-10`}>Anime Showcase</h2>
      <div className="flex flex-wrap justify-center gap-8 relative z-10">
        {animeContent.map((anime, index) => (
          <div key={index} className="w-64 flex flex-col items-center">
            <div className="mb-4 overflow-hidden rounded-lg shadow-lg transform transition-all duration-300 hover:scale-105">
              <img src={anime.image} alt={anime.title} className="w-full h-auto" />
            </div>
            <h3 className={`text-xl font-bold ${theme.accent}`}>{anime.title}</h3>
          </div>
        ))}
      </div>
    </section>
  );
});

const App = () => {
  const { theme, changeTheme, currentTheme, achievements } = useTheme();
  const { width, height } = useWindowSize();
  const lenisRef = useRef(null);
  const audioContextRef = useRef(null);

  const [state, setState] = useState({
    isPlaying: false,
    showSecret: false,
    debugMode: false,
    matrixMode: false,
    gameActive: false,
    currentQuote: 0,
    developerQuotes: [
      "I don't always test my code, but when I do, I do it in production",
      "No braincells? No problem!",
      "Git push --force: Because sometimes, history needs a little rewriting",
      "It's not a bug, it's a feature™",
      "404: Brain not found",
      "Hello world? More like goodbye sanity!",
      "It works on my machine ¯\\_(ツ)_/¯"
    ]
  });

  // Initialize smooth scrolling
  useEffect(() => {
    const lenis = new Lenis({
      lerp: 0.075,
      smooth: true,
      direction: 'vertical',
      smoothWheel: true,
      wheelMultiplier: 1,
      touchMultiplier: 2,
    });

    lenisRef.current = lenis;

    const raf = (time) => {
      lenis.raf(time);
      requestAnimationFrame(raf);
    };

    requestAnimationFrame(raf);

    return () => {
      lenis.destroy();
      ScrollTrigger.getAll().forEach(trigger => trigger.kill());
    };
  }, []);

  // Handle audio visualization
  const initAudioVisualization = useCallback(() => {
    if (audioContextRef.current) return;

    try {
      const AudioContext = window.AudioContext || window.webkitAudioContext;
      audioContextRef.current = new AudioContext();
      const oscillator = audioContextRef.current.createOscillator();
      const gainNode = audioContextRef.current.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(audioContextRef.current.destination);
      
      oscillator.type = 'sine';
      oscillator.frequency.setValueAtTime(440, audioContextRef.current.currentTime);
      gainNode.gain.setValueAtTime(0.1, audioContextRef.current.currentTime);

      oscillator.start();
      setState(prev => ({ ...prev, isPlaying: true }));

      setTimeout(() => {
        oscillator.stop();
        setState(prev => ({ ...prev, isPlaying: false }));
        audioContextRef.current = null;
      }, 1000);
    } catch (error) {
      console.error('Audio initialization failed:', error);
    }
  }, []);

  // Konami code handler
  useKonamiCode(() => {
    setState(prev => ({ ...prev, gameActive: true }));
    confetti({
      particleCount: 100,
      spread: 160,
      origin: { y: 0.6 }
    });
  });

  // Random meme sound effect
  const playRandomSound = useCallback(() => {
    if (audioContextRef.current) return;

    try {
      const AudioContext = window.AudioContext || window.webkitAudioContext;
      audioContextRef.current = new AudioContext();
      const oscillator = audioContextRef.current.createOscillator();
      const gainNode = audioContextRef.current.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(audioContextRef.current.destination);
      
      // Random sound effect settings
      oscillator.type = ['sine', 'square', 'sawtooth', 'triangle'][Math.floor(Math.random() * 4)];
      oscillator.frequency.setValueAtTime(200 + Math.random() * 500, audioContextRef.current.currentTime);
      gainNode.gain.setValueAtTime(0.1, audioContextRef.current.currentTime);

      oscillator.start();
      gainNode.gain.exponentialRampToValueAtTime(0.001, audioContextRef.current.currentTime + 0.5);
      
      setTimeout(() => {
        oscillator.stop();
        audioContextRef.current = null;
      }, 500);
    } catch (error) {
      console.error('Audio initialization failed:', error);
    }
  }, []);

  return (
    <BrowserRouter>
      <Suspense fallback={null}>
        <CustomCursor />
      </Suspense>
      <ThemeSelector theme={theme} handleThemeChange={changeTheme} />
      <PersonalProfile />
      
      {/* Floating anime characters */}
      <FloatingAnimeCharacter position="left" />
      <FloatingAnimeCharacter position="right" />
      
      <Routes>
        <Route path="/tunnel" element={<TunnelRoute />} />
        <Route 
          path="/" 
          element={
            <div className={`relative ${currentTheme.background} ${currentTheme.text} min-h-screen transition-colors duration-500`}>
              {/* Optional meme overlay */}
              {theme === THEMES.MEME && (
                <div className="fixed inset-0 pointer-events-none z-10 opacity-5">
                  <img src="/api/placeholder/1000/1000" alt="Meme pattern" className="w-full h-full object-cover" />
                </div>
              )}
              
              {/* Hero Section */}
              <section className="hero-section h-screen relative overflow-hidden">
                <div className="hero-content absolute inset-0 flex flex-col items-center justify-center z-30">
                  <div className="mb-6">
                    <MemeImage 
                      src="/api/placeholder/120/120" 
                      alt="Your profile" 
                      className="rounded-full border-4 border-white shadow-lg"
                    />
                  </div>
                  
                  <h1 className={`text-6xl md:text-8xl font-bold text-center mb-8 tracking-tight 
                    ${currentTheme.accent} ${currentTheme.hover} transition-colors ${state.gameActive ? 'animate-bounce' : ''}`}>
                    {state.debugMode ? "console.log('Brainrot.exe');" : theme === THEMES.MEME ? "Professional Memer" : theme === THEMES.ANIME ? "Weeb Central" : "Welcome to My Portfolio"}
                  </h1>

                  {/* Current theme display */}
                  <div className="mb-6 bg-black/30 px-4 py-2 rounded-full backdrop-blur-sm">
                    <span className="text-white">Current Vibe: </span>
                    <span className={`font-bold ${currentTheme.accent}`}>{currentTheme.name}</span>
                  </div>

                  {/* Easter Egg Buttons */}
                  <div className="flex flex-wrap justify-center gap-4 mb-8">
                    <EasterEggButton
                      icon={Terminal}
                      isActive={state.debugMode}
                      onClick={() => setState(prev => ({ ...prev, debugMode: !prev.debugMode }))}
                      tooltip="Toggle debug mode"
                    />
                    <EasterEggButton
                      icon={GitBranch}
                      isActive={false}
                      onClick={() => {
                        confetti();
                        playRandomSound();
                      }}
                      tooltip="Git push --force"
                    />
                    <EasterEggButton
                      icon={Music}
                      isActive={state.isPlaying}
                      onClick={initAudioVisualization}
                      tooltip="Make some noise!"
                    />
                    <EasterEggButton
                      icon={Sparkles}
                      isActive={state.matrixMode}
                      onClick={() => setState(prev => ({ ...prev, matrixMode: !prev.matrixMode }))}
                      tooltip="Toggle Matrix mode"
                    />
                    <EasterEggButton
                      icon={Flame}
                      isActive={false}
                      onClick={() => {
                        confetti({
                          particleCount: 100,
                          spread: 160,
                          origin: { y: 0.6 },
                          colors: ['#ff0000', '#ff7700', '#ffff00']
                        });
                      }}
                      tooltip="Fire meme review"
                    />
                  </div>

                  {/* Developer Quote with click animation */}
                  <div 
                    className={`text-xl font-medium mb-4 cursor-pointer px-6 py-3 rounded-lg 
                      ${currentTheme.accent} ${currentTheme.hover} transition-all duration-300 transform 
                      hover:scale-105 active:scale-95 bg-black/30 backdrop-blur-sm`}
                    onClick={() => {
                      setState(prev => ({
                        ...prev,
                        currentQuote: (prev.currentQuote + 1) % prev.developerQuotes.length
                      }));
                      playRandomSound();
                    }}
                  >
                    {state.developerQuotes[state.currentQuote]}
                  </div>
                </div>
              </section>

              {/* Personal Gallery Section */}
              <section className="p-8 relative z-20">
                <h2 className={`text-4xl font-bold mb-8 text-center ${currentTheme.accent}`}>My Gallery</h2>
                <div className="flex flex-wrap justify-center gap-6">
                  {[1, 2, 3, 4, 5, 6].map((_, index) => (
                    <div key={index} className="w-48 h-48 rounded-lg overflow-hidden relative group">
                      <img 
                        src={`/api/placeholder/200/200`} 
                        alt={`Personal photo ${index + 1}`} 
                        className="w-full h-full object-cover transition-all duration-500 group-hover:scale-110"
                      />
                      <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                        <span className={`text-white font-medium`}>Photo {index + 1}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </section>

              {/* Meme Gallery Section */}
              <MemeGallery theme={currentTheme} />

              {/* Board Section */}
              <Suspense fallback={<div className="w-full h-screen bg-black" />}>
                <Board />
              </Suspense>

              {/* Anime Section */}
              <AnimeSection theme={currentTheme} />

              {/* Text Reveal Section */}
              <Suspense fallback={<div className="w-full h-screen bg-black" />}>
                <TextRevealSection />
              </Suspense>

              {/* Tunnel Link Section */}
              <section className="w-full min-h-screen flex items-center justify-center p-8 relative">
                {/* Background anime characters for tunnel section */}
                <div className="absolute inset-0 pointer-events-none opacity-20">
                  <div className="absolute top-1/4 left-1/4">
                    <img src="/api/placeholder/150/200" alt="Anime character" />
                  </div>
                  <div className="absolute bottom-1/4 right-1/4">
                    <img src="/api/placeholder/150/200" alt="Anime character" />
                  </div>
                </div>
                
                <div className="text-center">
                  <h2 className={`text-4xl font-bold mb-6 ${currentTheme.accent}`}>Enter the Void</h2>
                  <Link
                    to="/tunnel"
                    className={`text-xl font-bold ${currentTheme.accent} ${currentTheme.hover} transition-colors underline px-6 py-3 rounded-lg border-2 border-current hover:bg-black/20`}
                    onClick={() => playRandomSound()}
                  >
                    Explore the Tunnel Effect
                  </Link>
                </div>
              </section>
            </div>
          } 
        />
      </Routes>
    </BrowserRouter>
  );
};

export default App;
